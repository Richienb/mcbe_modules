import { fs } from "bdsx";
import Event from "krevent";

export class JsonWatcher<T>
{
    private asyncwork:Promise<void> = Promise.resolve();
    private savedTime:number = 0;

    public readonly onUpdate = new Event<(data:T, old:T)=>void>();

    public data:T;

    constructor(private readonly filename:string, defaultData:T)
    {
        const watcher = fs.watch(filename);

        this.data = defaultData;
        
        watcher.setOnCreated(file=>{
            this.load();
        });
        watcher.setOnDeleted(file=>{
            this.data = defaultData;
            this.save();
        });
        watcher.setOnModified(file=>{
            this.load();
        });
        watcher.setOnRenamed((to, from)=>{
            if (to === filename)
            {
                this.load();
            }
            else
            {
                this.data = defaultData;
                this.save();
            }
        });
        this.load();
    }

    load():void
    {
        if (Date.now() <= this.savedTime) return;

        this.asyncwork = this.asyncwork
        .then(async()=>{
            try
            {
                const content = await fs.readFile(this.filename);
                try
                {
                    const newdata = JSON.parse(content);
                    this.onUpdate.fire(newdata, this.data);
                    this.data = newdata;
                }
                catch (err)
                {
                    console.error(err);
                }
            }
            catch (err)
            {
                this.save();
            }
        });
    }
    save():void
    {
        this.asyncwork = this.asyncwork.then(()=>{
            this.savedTime = Date.now() + 500;
            const content = JSON.stringify(this.data, null, 4);
            return fs.writeFile(this.filename, content);
        })
        .catch(err=>console.error(err));
    }
}
