/// <reference path="../../minecraft-scripting-types-server/index.d.ts" />
/// <reference path="../../minecraft-scripting-types-client/index.d.ts" />

declare global
{
    interface NodeRequireFunction {
        /* tslint:disable-next-line:callable-types */
        (id: string): any;
    }
    interface NodeRequire extends NodeRequireFunction {
    }
    
    var require: NodeRequire;
}

import dummyConsole from '@mcbe/dummy-console';
dummyConsole.install();

// system shared, it can be client or server
export let systemShared:IVanillaClientSystem|IVanillaServerSystem;

// set system from external
export function setSystem(system:IVanillaClientSystem|IVanillaServerSystem):void
{
    if (systemShared)
    {
        console.error('Already system is created');
        throw Error('Already system is created');
    }
    systemShared = system;
}

// create client system
// if system is already exists it will that
export function createClientSystem(majorVersion: number, minorVersion: number):IVanillaClientSystem
{
    if (typeof client === 'undefined') throw Error('No client system');
    if (systemShared) return systemShared as any;
    const system = client.registerSystem(majorVersion, minorVersion);
    systemShared = system;
    return system;
}

// create server system
// if system is already exists it will that
export function createServerSystem(majorVersion: number, minorVersion: number):IVanillaServerSystem
{
    if (typeof server === 'undefined') throw Error('No server system');
    if (systemShared) return systemShared as any;
    const system = server.registerSystem(majorVersion, minorVersion);
    systemShared = system;
    return system;
}
