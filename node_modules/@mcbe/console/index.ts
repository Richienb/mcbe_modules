import { LogLevel, logListener } from "krlog";
import { tellraw, tellrawAll } from "@mcbe/system_server";

const LOG_LEVEL_PREFIX:string[] = [];

LOG_LEVEL_PREFIX[LogLevel.Verbose] = 'ยง7';
LOG_LEVEL_PREFIX[LogLevel.Message] = '';
LOG_LEVEL_PREFIX[LogLevel.Warning] = 'ยง4';
LOG_LEVEL_PREFIX[LogLevel.Error] = 'ยงc';

const listeners = new Map<string, (level:LogLevel, message:string)=>void>();

let mainListenerTimeout:NodeJS.Timeout|null;

function mainListener(level:LogLevel, message:string):void
{
    tellrawAll([LOG_LEVEL_PREFIX[level] + message]);
}

const mclog = {
    message(target:string, level:LogLevel, msg:string)
    {
        tellraw(target, [LOG_LEVEL_PREFIX[level] + msg]);
    },

    /**
     * @param target user name
     */
    addTarget(target:string):void
    {
        if (listeners.has(target)) return;
        function printTo(level:LogLevel, msg:string):void
        {
            mclog.message(target, level, msg);
        }
        logListener.on(printTo);
        listeners.set(target, printTo);
    },
    
    /**
     * @param target user name
     */
    removeTarget(target:string):void
    {
        const listener = listeners.get(target);
        if (listener)
        {
            listeners.delete(target);
            logListener.remove(listener);
        }
    },
    

    cancelMainListener():void
    {
        if (mainListenerTimeout)
        {
            clearTimeout(mainListenerTimeout);
            mainListenerTimeout = null;
        }
        else
        {
            logListener.remove(mainListener);
        }
    }
};

mainListenerTimeout = setTimeout(()=>{
    if (listeners.size !== 0) return;
    logListener.remove(mainListener);
}, 5000);

export default mclog;
